# up the 1823 utterances excluded in what follows.
vetteddata <- xdsall %>%
# Excludes 1798 utterances with XDS not equal to CDS or ADS
# (1730 agreed-upon as junk and 68 without a majority score)
filter(label_m == "CDS" |label_m == "ADS") %>%
# Excludes 44 utterances with no agreed-upon adult gender
filter(adu_gender_m != "NMJ")
# Note that there is some overlap in the exclusion cases,
# resulting in a total of 1823 utterances excluded
# To prepare the data for modeling we'll need to make a few modifications like:
# converting the labels to binary values, centering age, and
# converting leftover character cols to factors
modeldata <- vetteddata %>%
mutate(lab_m_bin = recode(label_m, ADS = 0, CDS = 1),
lab_m_bin_f = recode(label_m, ADS = 1, CDS = 0),
utt_on = as.numeric(utt_on),
utt_off = as.numeric(utt_off)) %>%
mutate_if(sapply(., is.character), as.factor)
# Information about the original LENA conversational blocks
blockdata <-  xdsall %>%
dplyr::select(c(Corpus, ChiID, ID, aclew_id, clan_file,
block, uniq_block, blk_dur,
chi_gender, AgeMonths, mat_ed, mat_ed_num,
mat_ed_num3, mother_dob, n_sibs)) %>%
mutate(uniq_block = as.character(uniq_block)) %>%
distinct()
# Information about outlying blocks by block duration
blockdata <- blockdata %>%
mutate(toolong = ifelse(
blk_dur > (mean(blockdata$blk_dur) +
OL.thresh*(sd(blockdata$blk_dur))),1,0))
# Identify outlier blocks
blockdata.OL <- blockdata %>%
filter(toolong == 1) %>%
dplyr::select(uniq_block)
# Remove the outlier blocks from the data
modeldata.excl <- modeldata %>%
anti_join(blockdata.OL, by = "uniq_block")
################################################################################
# ADS and CDS minutes per hour (quantity) ####
# Get a total time in hours for the blocks from each child
ID.t.h <- blockdata %>%
filter(toolong == 0) %>%
group_by(ID) %>%
# note that block duration is already in minutes here
summarise(ID.h = sum(blk_dur/60),
ID.N = n()) %>%
left_join(IDS_demo_update, by = "ID")
# Create a matrix of adultgender-childID combinations to ensure we include
# cases with no ADS/CDS for a male/female speaker for each child
uniq.IDs <- dplyr::select(ID.t.h, ID)
# We first model ADS and CDS minutes per hour,
# which requires us to make summaries of each
adsratedata <-  modeldata.excl %>%
filter(label_m == "ADS") %>%
group_by(ID) %>%
summarise(ads.min = sum(utt_dur/60000)) %>%
right_join(uniq.IDs, by = c("ID")) %>%
replace_na(list(ads.min = 0)) %>%
left_join(ID.t.h, by = "ID") %>%
mutate_if(sapply(., is.character), as.factor) %>%
mutate(agem.c = AgeMonths - mean(IDS_demo_update$AgeMonths),
age.bin = ifelse(AgeMonths < 12, 0, 1),
age.qrt = findInterval(AgeMonths, c(0,6,12,18)),
ads.minph = ads.min / ID.h,
ads.minph.lg = log(ads.minph+1))
cdsratedata <-  modeldata.excl %>%
filter(label_m == "CDS") %>%
group_by(ID) %>%
summarise(cds.min = sum(utt_dur/60000)) %>%
right_join(uniq.IDs, by = c("ID")) %>%
replace_na(list(cds.min = 0)) %>%
left_join(ID.t.h, by = "ID") %>%
mutate_if(sapply(., is.character), as.factor) %>%
mutate(agem.c = AgeMonths - mean(IDS_demo_update$AgeMonths),
age.bin = ifelse(AgeMonths < 12, 0, 1),
age.qrt = findInterval(AgeMonths, c(0,6,12,18)),
cds.minph = cds.min / ID.h,
cds.minph.lg = log(cds.minph+1))
# Now, in order to also estimate speaker gender effects on MinPH...
# Create a matrix of adultgender-childID combinations to ensure we include
# cases with no ADS/CDS for a male/female speaker for each child
ID.agd.combos <-  tibble(adu_gender_m = as.factor(
sort(rep(c("FEMALE", "MALE"), nrow(chiall)))),
ID = c(as.character(chiall$ID),
as.character(chiall$ID))) %>%
mutate(ID = as.factor(ID))
adsratedata.agd <-  modeldata.excl %>%
filter(label_m == "ADS") %>%
group_by(ID, adu_gender_m) %>%
summarise(ads.min = sum(utt_dur/60000)) %>%
right_join(ID.agd.combos, by = c("ID", "adu_gender_m")) %>%
replace_na(list(ads.min = 0)) %>%
left_join(ID.t.h, by = "ID") %>%
mutate_if(sapply(., is.character), as.factor) %>%
mutate(agem.c = AgeMonths - mean(IDS_demo_update$AgeMonths),
age.bin = ifelse(AgeMonths < 12, 0, 1),
age.qrt = findInterval(AgeMonths, c(0,6,12,18)),
ads.minph = ads.min / ID.h,
ads.minph.lg = log(ads.minph+1))
cdsratedata.agd <-  modeldata.excl %>%
filter(label_m == "CDS") %>%
group_by(ID, adu_gender_m) %>%
summarise(cds.min = sum(utt_dur/60000)) %>%
right_join(ID.agd.combos, by = c("ID", "adu_gender_m")) %>%
replace_na(list(cds.min = 0)) %>%
left_join(ID.t.h, by = "ID") %>%
mutate_if(sapply(., is.character), as.factor) %>%
mutate(agem.c = AgeMonths - mean(IDS_demo_update$AgeMonths),
age.bin = ifelse(AgeMonths < 12, 0, 1),
age.qrt = findInterval(AgeMonths, c(0,6,12,18)),
cds.minph = cds.min / ID.h,
cds.minph.lg = log(cds.minph+1))
# Finally, to ensure that our speaker gender effects aren't driven by cases
# in which we are unsue whether a speaker is actually present:
# Remove data for speakers whose presence we can't verify:
# e.g., when there is no male speech at all in ADS or CDS
# we can't say that a male was present so we can't draw
# inferences about what that child hears from men
noads <-  adsratedata.agd %>%
filter(ads.minph == 0) %>%
dplyr::select(ID, adu_gender_m)
nocds <-  cdsratedata.agd %>%
filter(cds.minph == 0) %>%
dplyr::select(ID, adu_gender_m)
noskr <-  bind_rows(noads, nocds) %>%
group_by(ID, adu_gender_m) %>%
summarise(N = n()) %>%
filter(N > 1) %>%
summarise(ID.agd = paste(ID, adu_gender_m, sep= '-')) %>%
dplyr::select(ID.agd)
# Female speech (ADS and/or CDS) is verified for all children.
# Male speech (ADS and/or CDS) is verified for 53 of the children.
# so we remove the 8 male-speech cells that can't be verified from
# the analysis of MinPH of ADS and CDS
adsratedata.agd.sub <- adsratedata.agd %>%
mutate(ID.agd = paste(ID, adu_gender_m, sep= '-')) %>%
filter((!ID.agd %in% noskr$ID.agd)) %>%
dplyr::select(-ID.agd)
cdsratedata.agd.sub <- cdsratedata.agd %>%
mutate(ID.agd = paste(ID, adu_gender_m, sep= '-')) %>%
filter((!ID.agd %in% noskr$ID.agd)) %>%
dplyr::select(-ID.agd)
# Incrementally build best models of CDS and ADS min/hr
# Primary models
source(paste0(scripts, models, "MOD-ADS-MinPH.R"))
source(paste0(scripts, models, "MOD-CDS-MinPH.R"))
# Separate models of male and female speech
source(paste0(scripts, models, "MOD-ADS-MinPH-MvsF.R"))
source(paste0(scripts, models, "MOD-CDS-MinPH-MvsF.R"))
# Results of the best-fit models:
# ADS minutes per hour
ADS.minph.mdl <- tidy(ads.mph.best)
ADS.minph.mdl
# ADS minutes per hour, split by speaker gender
ADS.minph.mdl.agd <- tidy(ads.agd.mph.best)
ADS.minph.mdl.agd
# ADS minutes per hour, split by speaker gender, with exclusions
ADS.minph.mdl.agd.s <- tidy(ads.agd.s.mph.best)
ADS.minph.mdl.agd.s
# ADS minutes per hour, separate models by speaker gender
ADS.minph.mdl.agd.s.F <- tidy(fad.mph.best)
ADS.minph.mdl.agd.s.F
ADS.minph.mdl.agd.s.M <- tidy(mad.mph.best)
ADS.minph.mdl.agd.s.M
# CDS minutes per hour overall
CDS.minph.mdl <- tidy(cds.mph.best)
CDS.minph.mdl
# CDS minutes per hour, split by speaker gender
CDS.minph.mdl.agd <- tidy(cds.agd.mph.best)
CDS.minph.mdl.agd
# CDS minutes per hour, split by speaker gender, with exclusions
CDS.minph.mdl.agd.s <- tidy(cds.agd.s.mph.best)
CDS.minph.mdl.agd.s
# CDS minutes per hour, separate models by speaker gender
CDS.minph.mdl.agd.s.F <- tidy(fcd.mph.best)
CDS.minph.mdl.agd.s.F
CDS.minph.mdl.agd.s.M <- tidy(mcd.mph.best)
CDS.minph.mdl.agd.s.M
# Descriptive information about ADS and CDS MinPH
# Mean, median, SD, min, and max MinPH across the 61 kids
# (add in group_by() to create the other descriptive avgs for tables)
ads.mph.dsm.all <-  adsratedata %>%
summarise(mn.mph = mean(ads.minph),
md.mph = median(ads.minph),
sd.mph = sd(ads.minph),
min.mph = min(ads.minph),
max.mph = max(ads.minph))
cds.mph.dsm.all <-  cdsratedata %>%
summarise(mn.mph = mean(cds.minph),
md.mph = median(cds.minph),
sd.mph = sd(cds.minph),
min.mph = min(cds.minph),
max.mph = max(cds.minph))
# per-child summary of CDS and ADS
cds.per.kid <- cdsratedata %>%
dplyr::select(ID, AgeMonths, cds.minph) %>%
rename(xds.minph = cds.minph) %>%
mutate(addressee = "child")
ads.per.kid <- adsratedata %>%
dplyr::select(ID, AgeMonths, ads.minph) %>%
rename(xds.minph = ads.minph) %>%
mutate(addressee = "adult")
xds.per.kid <- bind_rows(cds.per.kid, ads.per.kid) %>%
arrange(AgeMonths, ID, addressee)
# quick sanity-check plot:
# ggplot(xds.per.kid, aes(y=xds.minph, x=AgeMonths, color=addressee)) +
#   geom_point() + geom_smooth(method="lm")
################################################################################
# Proportion CDS (focus) ####
# We next model proportion of CDS (in seconds),
# which requires us to make more summaries
secADS <-  modeldata.excl %>%
filter(label_m == "ADS") %>%
group_by(ID) %>%
summarise(ads.sec = sum(utt_dur)/1000)
secCDS <-  modeldata.excl %>%
filter(label_m == "CDS") %>%
group_by(ID) %>%
summarise(cds.sec = sum(utt_dur)/1000)
propCDS <-  secADS %>%
right_join(secCDS, by = "ID") %>%
replace_na(list(ads.sec = 0, cds.sec = 0)) %>%
mutate(prp.cds = cds.sec / (ads.sec + cds.sec)) %>%
replace_na(list(prp.cds = 0)) %>%
right_join(IDS_demo_update, by = "ID") %>%
mutate(agem.c = AgeMonths - mean(IDS_demo_update$AgeMonths),
age.bin = ifelse(AgeMonths < 12, 0, 1),
age.qrt = findInterval(AgeMonths, c(0,6,12,18)),
prp.cds.lg = log(prp.cds+1))
# Now, in order to also estimate speaker gender effects on propCDS...
# Create a matrix of adultgender-childID combinations to ensure we include
# cases with no ADS/CDS for a male/female speaker for each child
block.agd.combos <-  tibble(adu_gender_m = as.factor(
sort(rep(c("FEMALE", "MALE"), nrow(blockdata)))),
uniq_block = c(blockdata$uniq_block,
blockdata$uniq_block))
secADS.agd <-  modeldata.excl %>%
filter(label_m == "ADS") %>%
group_by(ID, adu_gender_m) %>%
summarise(ads.sec = sum(utt_dur)/1000)
secCDS.agd <-  modeldata.excl %>%
filter(label_m == "CDS") %>%
group_by(ID, adu_gender_m) %>%
summarise(cds.sec = sum(utt_dur)/1000)
propCDS.agd <-  secADS.agd %>%
full_join(secCDS.agd, by = c("ID", "adu_gender_m")) %>%
right_join(ID.agd.combos, by = c("ID", "adu_gender_m")) %>%
replace_na(list(ads.sec = 0, cds.sec = 0)) %>%
mutate(prp.cds = cds.sec / (ads.sec + cds.sec)) %>%
replace_na(list(prp.cds = 0)) %>%
right_join(IDS_demo_update, by = "ID") %>%
mutate(agem.c = AgeMonths - mean(IDS_demo_update$AgeMonths),
age.bin = ifelse(AgeMonths < 12, 0, 1),
age.qrt = findInterval(AgeMonths, c(0,6,12,18)),
prp.cds.lg = log(prp.cds+1))
# Exclude cases in which there is no speech male/female speakers, e.g.,
# if there is no male speech for child Z01 we can't analyze proportion
# CDS for male speakers in Z01's environment.
nocds <- filter(propCDS.agd, ads.sec + cds.sec == 0)
# Consistent with the analyses of CDS and ADS MinPH,
# female speech is verified for all children and male speech
# is verified for 53 of the children, so we remove the 8 male-speech
# cells that can't be verified from our analysis of proportion CDS
propCDS.agd.sub <- filter(propCDS.agd, ads.sec + cds.sec > 0)
# Incrementally build best models of proportion CDS
# Primary models
source(paste0(scripts, models, "MOD-CDS-Prop.R"))
# Separate models of male and female speech
source(paste0(scripts, models, "MOD-CDS-Prop-MvsF.R"))
# Results of the best-fit models:
# Proportion CDS
CDS.prp.mdl <- tidy(cds.prp.best)
CDS.prp.mdl
# Proportion CDS, split by speaker gender
CDS.prp.mdl.agd <- tidy(cds.prp.agd.s.best)
CDS.prp.mdl.agd
# Proportion CDS, separate models by speaker gender
CDS.prp.mdl.agd.s.F <- tidy(fcd.prp.best)
CDS.prp.mdl.agd.s.F
CDS.prp.mdl.agd.s.M <- tidy(mcd.prp.best)
CDS.prp.mdl.agd.s.M
# Descriptive information about proportion CDS
# Mean, median, SD, min, and max MinPH across the 61 kids
# (add in group_by() to create the other descriptive avgs for tables)
cds.prp.dsm.all <-  propCDS %>%
summarise(mn.mph = mean(prp.cds),
md.mph = median(prp.cds),
sd.mph = sd(prp.cds),
min.mph = min(prp.cds),
max.mph = max(prp.cds))
################################################################################
# # CDS/ADS correlations ####
# overall scores
cdsratedata.scores <- cdsratedata %>% dplyr::select(ID, cds.min)
propCDS.scores <- propCDS %>% dplyr::select(ID, prp.cds)
by.rec.scores <- adsratedata %>%
left_join(cdsratedata.scores) %>%
left_join(propCDS.scores)
cor.test(by.rec.scores$cds.min, by.rec.scores$ads.min,
method = "spearman")
################################################################################
# NB: ANALYSES OF CDS UTT LENGTH ARE NOT VETTED OR UP-TO-DATE (do not use)
# Needs updated model predictors and model-building style in line with the rest
################################################################################
# # CDS utterance length (complexity) ####
# CDSutts <-  modeldata.excl %>%
#             filter(label_m == "CDS") %>%
#             mutate(utt_dur.sec = (utt_dur/1000),
#                    utt_dur.sec.lg = log(utt_dur.sec+1)) %>%
#             # Remove utterances 3SDs outside of the mean (lower cutoff is < 0)
#             filter(utt_dur.sec < (mean(utt_dur.sec)+(3*sd(utt_dur.sec)))) %>%
#             group_by(ID) %>%
#             summarise(mutt_len = median(utt_dur.sec),
#                       mutt_len.lg = median(utt_dur.sec.lg)) %>%
#             left_join(ID.t.h, by = "ID") %>%
#             mutate(age.bin = ifelse(AgeMonths < 12, 0, 1),
#                    age.qrt = findInterval(AgeMonths, c(0,6,12,18)),
#                    agem.c = AgeMonths - mean(IDS_demo_update$AgeMonths))
#
# # Now, in order to also estimate speaker gender effects on CDS length...
# CDSutts.agd <-  modeldata.excl %>%
#             filter(label_m == "CDS") %>%
#             mutate(utt_dur.sec = (utt_dur/1000),
#                    utt_dur.sec.lg = log(utt_dur.sec+1)) %>%
#             # Remove utterances 3SDs outside of the mean (lower cutoff is < 0)
#             filter(utt_dur.sec < (mean(utt_dur.sec)+(3*sd(utt_dur.sec)))) %>%
#             right_join(ID.agd.combos, by = c("ID", "adu_gender_m")) %>%
#             replace_na(list(utt_dur.sec = 0, utt_dur.sec.lg = 0)) %>%
#             group_by(ID, adu_gender_m) %>%
#             summarise(mutt_len = median(utt_dur.sec),
#                       mutt_len.lg = median(utt_dur.sec.lg)) %>%
#             left_join(ID.t.h, by = "ID") %>%
#             mutate(age.bin = ifelse(AgeMonths < 12, 0, 1),
#                    age.qrt = findInterval(AgeMonths, c(0,6,12,18)),
#                    agem.c = AgeMonths - mean(IDS_demo_update$AgeMonths))
#
# # Exclude cases in which there is no CDS from male/female speakers, e.g.,
# # if there is no male speech for child Z01 we can't analyze the length
# # of the utterances.
#
# nocds2 <- filter(CDSutts.agd, mutt_len == 0)
#
# # Slightly different from the analyses of CDS and ADS MinPH (because
# # in this analysis we focus on CDS only), female CDS is verified for all
# # children except one and male speech is verified for 50 of the children,
# # so we remove the 1 female CDS and 8 male CDS cells that can't be verified
# # from our analysis of proportion CDS
#
# CDSutts.agd <- filter(CDSutts.agd, mutt_len > 0)
#
# # Incrementally build best models of CDS utt len
# # Primary models
# source(paste0(scripts, models, "MOD-CDS-UttLen.R"))
# # Separate models of male and female speech
# source(paste0(scripts, models, "MOD-CDS-UttLen-MvsF.R"))
#
# # Results of the best-fit models:
# # CDS utterance length
# CDS.dur.mdl <- tidy(cds.dur.best)
# CDS.dur.mdl
# CDS.dur.mdl.agd <- tidy(cds.dur.agd.best)
# CDS.dur.mdl.agd
# # CDS utterance length, separate models by speaker gender
# CDS.dur.mdl.agd.s.F <- tidy(fcd.dur.best)
# CDS.dur.mdl.agd.s.F
# CDS.dur.mdl.agd.s.M <- tidy(mcd.dur.best)
# CDS.dur.mdl.agd.s.M
#
#
################################################################################
# LAST STEPS ####
# Run some sanity checks
source(paste0(scripts,"sanity-checks.R"))
# Print sanity-check figures (depends on the other sourced file)
if (printfigs == "Y") {
source(paste0(scripts,"sanity-checks-figs.R"))
source(paste0(scripts,"FIG-effectillustration.R"))
}
# Run the following lines for the maximal versions of the model
# NB: This takes quite a while!
source(paste0(scripts, models, "MOD-Maximal.R"))
# ADS minPH
ads.mph.best.max # ADS minPH overall
ads.agd.mph.best.max # ADS minPH with speaker gender
ads.agd.s.mph.best.max # ADS minPH with speaker gender, no male speech cases removed
# CDS minPH
cds.mph.best.max # CDS minPH overall
cds.agd.mph.best.max # CDS minPH with speaker gender
cds.agd.s.mph.best.max # CDS minPH with speaker gender, no male speech cases removed
# Prop CDS
cds.prp.best.max # Prop CDS overall
cds.prp.agd.best.max # Prop CDS with speaker gender
cds.prp.agd.s.best.max # Prop CDS with speaker gender, no male speech cases removed
summary(ads.mph.best.max) # ADS minPH overall
summary(ads.agd.mph.best.max) # ADS minPH with speaker gender
summary(ads.agd.s.mph.best.max) # ADS minPH with speaker gender, no male speech cases removed
# CDS minPH
summary(cds.mph.best.max) # CDS minPH overall
summary(cds.agd.mph.best.max) # CDS minPH with speaker gender
summary(cds.agd.s.mph.best.max) # CDS minPH with speaker gender, no male speech cases removed
# Prop CDS
summary(cds.prp.best.max) # Prop CDS overall
summary(cds.prp.agd.best.max) # Prop CDS with speaker gender
summary(cds.prp.agd.s.best.max) # Prop CDS with speaker gender, no male speech cases removed
CDS.minph.mdl
CDS.minph.mdl.agd
CDS.minph.mdl.agd.s
ADS.minph.mdl
ADS.minph.mdl.agd
ADS.minph.mdl.agd.s
CDS.prp.mdl
CDS.prp.mdl.agd
ads.agd.s.mph.best
ads.agd.s.mph.best.max
summary(ads.agd.s.mph.best)
summary(ads.agd.s.mph.best.max)
View(cdsratedata)
awc.comparison <- read_csv(paste0(input.path, "idsads_awccvc.csv"))
View(awc.comparison)
awc.comparison %>%
left_join(cdsratedata, by = c("sample_id" = "ID"))
test <- awc.comparison %>%
left_join(cdsratedata, by = c("sample_id" = "ID"))
ncol(test)
View(test)
cdsratedata.sub <- cdsratedata %>%
-select(Corpus)
cdsratedata.sub <- cdsratedata %>% select(-(Corpus))
cdsratedata.sub <- cdsratedata %>% -select(Corpus)
cdsratedata
cdsratedata.sub <- cdsratedata %>% -select("Corpus")
cdsratedata.sub <- cdsratedata %>% select(-"Corpus")
select(cdsratedata, -"Corpus")
select(cdsratedata, -Corpus)
cdsratedata.sub <- dplyr::select(cdsratedata, -Corpus)
cdsratedata.sub
ncol(cdsratedata.sub)
ncol(cdsratedata)
ncol(adsratedata)
View(adsratedata)
ncol(propCDS)
View(propCDS)
cdsratedata.sub <- dplyr::select(cdsratedata, -Corpus)
adsratedata.sub <- dplyr::select(adsratedata, ID, ads.minph)
propcdsratedata.sub <- dplyr::select(propCDS, ID, prp.cds)
test <- awc.comparison %>%
left_join(cdsratedata.sub, by = c("sample_id" = "ID"))
View(test)
ncol(tet)
ncol(test)
ncol(cdsratedata.sub)
ncol(awc.comparison)
View(test)
awc.comparison.full <- awc.comparison %>%
left_join(cdsratedata.sub, by = c("sample_id" = "ID")) %>%
left_join(adsratedata.sub, by = c("sample_id" = "ID")) %>%
left_join(propcdsratedata.sub, by = c("sample_id" = "ID"))
ncol(awc.comparison.full)
View(awc.comparison.full)
cor.test(awc.comparison.full$AWC, awc.comparison.full$ads.minph,
method = "spearman")
cor.test(awc.comparison.full$AWC, awc.comparison.full$cds.minph,
method = "spearman")
nrow(awc.comparison.full)
awc.comparison.full$AWC
awc.comparison.full$ads.minph
awc.comparison.full$cds.minph
61-2
now()
Sys.time()
gsub(" ", "", Sys.time())
gsub(" ", "_", Sys.time())
gsub(":", "", gsub(" ", "_", Sys.time()))
write_csv(awc.comparison.full, paste0("x-scratch",
"-awc_comparison_full-",
gsub(":", "", gsub(" ", "_", Sys.time()))))
write_csv(awc.comparison.full, paste0("x-scratch/",
"-awc_comparison_full-",
gsub(":", "", gsub(" ", "_", Sys.time())),
".csv"))
write_csv(awc.comparison.full, paste0("x-scratch/",
"awc_comparison_full-",
gsub(":", "", gsub(" ", "_", Sys.time())),
".csv"))
view(adsratedata)
View(adsratedata)
cdsratedata.sub <- dplyr::select(cdsratedata, -Corpus)
adsratedata.sub <- dplyr::select(adsratedata, ID, ads.minph, ads.min)
propcdsratedata.sub <- dplyr::select(propCDS, ID, prp.cds)
awc.comparison.full <- awc.comparison %>%
left_join(cdsratedata.sub, by = c("sample_id" = "ID")) %>%
left_join(adsratedata.sub, by = c("sample_id" = "ID")) %>%
left_join(propcdsratedata.sub, by = c("sample_id" = "ID"))
# AWC with ADS minPH: Significantly correlated
cor.test(awc.comparison.full$AWC, awc.comparison.full$ads.minph,
method = "spearman")
# AWC with CDS minPH: Significantly correlated
cor.test(awc.comparison.full$AWC, awc.comparison.full$cds.minph,
method = "spearman")
write_csv(awc.comparison.full, paste0("x-scratch/",
"awc_comparison_full-",
gsub(":", "", gsub(" ", "_", Sys.time())),
".csv"))
View(cdsratedata)
View(awc.comparison.full)
summary(awc.comparison.full$ID.h)
summary(awc.comparison.full$cds.min)
awc.comparison.full$totalspch.min <- awc.comparison.full$cds.min +
awc.comparison.full$ads.min
summary(awc.comparison.full$ID.h)
summary(awc.comparison.full$totalspch.min)
